/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Fri Sep 21 08:54:38 -03 2018
 * 
 */

/* Generation options: */
#ifndef __mkTest_h__
#define __mkTest_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTest module */
class MOD_mkTest : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_app_abort;
  MOD_Fifo<tUInt8> INST_app_caminho;
  MOD_Fifo<tUInt32> INST_app_fromTCPq;
  MOD_Reg<tUInt32> INST_app_i;
  MOD_Reg<tUInt8> INST_app_newchar_count;
  MOD_Reg<tUInt8> INST_app_newline_count;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_abort;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_abort_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_1_start_reg;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_start_reg_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_1_start_reg_2;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_start_reg_3;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_start_wire;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_start_wire_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_1_state_can_overlap;
  MOD_Reg<tUInt8> INST_app_par_blocks_1_state_can_overlap_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_1_state_fired;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_state_fired_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_1_state_fired_2;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_state_fired_3;
  MOD_ConfigReg<tUInt8> INST_app_par_blocks_1_state_mkFSMstate;
  MOD_ConfigReg<tUInt8> INST_app_par_blocks_1_state_mkFSMstate_1;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_state_overlap_pw;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_state_overlap_pw_1;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_state_set_pw;
  MOD_Wire<tUInt8> INST_app_par_blocks_1_state_set_pw_1;
  MOD_Wire<tUInt8> INST_app_par_blocks_abort;
  MOD_Wire<tUInt8> INST_app_par_blocks_abort_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_start_reg;
  MOD_Wire<tUInt8> INST_app_par_blocks_start_reg_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_start_reg_2;
  MOD_Wire<tUInt8> INST_app_par_blocks_start_reg_3;
  MOD_Wire<tUInt8> INST_app_par_blocks_start_wire;
  MOD_Wire<tUInt8> INST_app_par_blocks_start_wire_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_state_can_overlap;
  MOD_Reg<tUInt8> INST_app_par_blocks_state_can_overlap_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_state_fired;
  MOD_Wire<tUInt8> INST_app_par_blocks_state_fired_1;
  MOD_Reg<tUInt8> INST_app_par_blocks_state_fired_2;
  MOD_Wire<tUInt8> INST_app_par_blocks_state_fired_3;
  MOD_ConfigReg<tUInt8> INST_app_par_blocks_state_mkFSMstate;
  MOD_ConfigReg<tUInt8> INST_app_par_blocks_state_mkFSMstate_1;
  MOD_Wire<tUInt8> INST_app_par_blocks_state_overlap_pw;
  MOD_Wire<tUInt8> INST_app_par_blocks_state_overlap_pw_1;
  MOD_Wire<tUInt8> INST_app_par_blocks_state_set_pw;
  MOD_Wire<tUInt8> INST_app_par_blocks_state_set_pw_1;
  MOD_Wire<tUInt8> INST_app_par_running;
  MOD_Wire<tUInt8> INST_app_par_running_1;
  MOD_Reg<tUInt8> INST_app_running;
  MOD_Reg<tUInt8> INST_app_start_reg;
  MOD_Reg<tUInt8> INST_app_start_reg_1;
  MOD_Wire<tUInt8> INST_app_start_reg_2;
  MOD_Wire<tUInt8> INST_app_start_wire;
  MOD_Reg<tUInt8> INST_app_state_can_overlap;
  MOD_Reg<tUInt8> INST_app_state_fired;
  MOD_Wire<tUInt8> INST_app_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_app_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_app_state_overlap_pw;
  MOD_Wire<tUInt8> INST_app_state_set_pw;
  MOD_Fifo<tUInt32> INST_app_toTCPq;
 
 /* Constructor */
 public:
  MOD_mkTest(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_app_actionpar_start_l109c33;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l114c57;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l112c65;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l145c55;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l140c97;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l139c51;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l136c72;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l135c65;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l134c71;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l130c56;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l126c99;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l125c51;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l120c91;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l119c51;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l108c33;
  tUInt8 DEF_WILL_FIRE_RL_app_actionpar_start_l78c33;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l83c57;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l81c65;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l102c55;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l99c56;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l94c95;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l93c51;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l88c91;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l87c51;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l68c33;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l61c33;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l58c33;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l56c41;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l53c39;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l52c39;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l51c33;
  tUInt8 DEF_WILL_FIRE_RL_app_action_l50c30;
  tUInt32 DEF_n__h150309;
  tUInt32 DEF_app_fromTCPq_first____d149;
  tUInt8 DEF__read__h392;
  tUInt8 DEF_app_newline_count__h2919;
  tUInt8 DEF_app_fromTCPq_first__49_BITS_9_TO_8___d150;
  tUInt8 DEF_IF_app_fromTCPq_first__49_BITS_9_TO_8_50_EQ_0__ETC___d193;
  tUInt8 DEF_app_fromTCPq_first__49_BITS_9_TO_8_50_EQ_0___d191;
  tUInt8 DEF_IF_app_fromTCPq_first__49_BITS_9_TO_8_50_EQ_0__ETC___d219;
 
 /* Local definitions */
 private:
  tUInt32 DEF_TASK_socket_get___d725;
  tUInt8 DEF_app_caminho_first____d572;
  tUInt8 DEF_IF_app_i_47_EQ_0_56_THEN_72_ELSE_IF_app_i_47_E_ETC___d405;
  tUInt32 DEF_x__h139093;
  tUInt32 DEF__1_CONCAT_DONTCARE___d471;
  tUInt32 DEF__0_CONCAT_IF_app_i_47_EQ_0_56_THEN_72_ELSE_IF_a_ETC___d406;
 
 /* Rules */
 public:
  void RL_app_start_reg__dreg_update();
  void RL_app_state_handle_abort();
  void RL_app_state_fired__dreg_update();
  void RL_app_state_every();
  void RL_app_par_blocks_start_reg__dreg_update();
  void RL_app_par_blocks_state_handle_abort();
  void RL_app_par_blocks_state_fired__dreg_update();
  void RL_app_par_blocks_state_every();
  void RL_app_par_blocks_restart();
  void RL_app_par_blocks_1_start_reg__dreg_update();
  void RL_app_par_blocks_1_state_handle_abort();
  void RL_app_par_blocks_1_state_fired__dreg_update();
  void RL_app_par_blocks_1_state_every();
  void RL_app_par_blocks_1_restart();
  void RL_app_par_blocks_start_reg__dreg_update_1();
  void RL_app_par_blocks_state_handle_abort_1();
  void RL_app_par_blocks_state_fired__dreg_update_1();
  void RL_app_par_blocks_state_every_1();
  void RL_app_par_blocks_restart_1();
  void RL_app_par_blocks_1_start_reg__dreg_update_1();
  void RL_app_par_blocks_1_state_handle_abort_1();
  void RL_app_par_blocks_1_state_fired__dreg_update_1();
  void RL_app_par_blocks_1_state_every_1();
  void RL_app_par_blocks_1_restart_1();
  void RL_app_restart();
  void RL_app_action_l50c30();
  void RL_app_action_l51c33();
  void RL_app_action_l52c39();
  void RL_app_action_l53c39();
  void RL_app_action_l56c41();
  void RL_app_action_l58c33();
  void RL_app_action_l61c33();
  void RL_app_action_l68c33();
  void RL_app_action_l87c51();
  void RL_app_action_l88c91();
  void RL_app_action_l93c51();
  void RL_app_action_l94c95();
  void RL_app_action_l99c56();
  void RL_app_action_l102c55();
  void RL_app_action_l81c65();
  void RL_app_action_l83c57();
  void RL_app_actionpar_start_l78c33();
  void RL_app_action_l108c33();
  void RL_app_action_l119c51();
  void RL_app_action_l120c91();
  void RL_app_action_l125c51();
  void RL_app_action_l126c99();
  void RL_app_action_l130c56();
  void RL_app_action_l134c71();
  void RL_app_action_l135c65();
  void RL_app_action_l136c72();
  void RL_app_action_l139c51();
  void RL_app_action_l140c97();
  void RL_app_action_l145c55();
  void RL_app_action_l112c65();
  void RL_app_action_l114c57();
  void RL_app_actionpar_start_l109c33();
  void RL_app_actionpar_run_l78c33();
  void RL_app_actionpar_run_l109c33();
  void RL_app_idle_l86c41();
  void RL_app_idle_l79c41();
  void RL_app_idle_l117c41();
  void RL_app_idle_l110c41();
  void RL_app_fsm_start();
  void RL_app_auto_start();
  void RL_app_auto_finish();
  void RL_socket2app();
  void RL_app2socket();
  void __me_check_25();
  void __me_check_26();
  void __me_check_27();
  void __me_check_28();
  void __me_check_29();
  void __me_check_30();
  void __me_check_31();
  void __me_check_32();
  void __me_check_33();
  void __me_check_34();
  void __me_check_35();
  void __me_check_36();
  void __me_check_37();
  void __me_check_39();
  void __me_check_42();
  void __me_check_43();
  void __me_check_44();
  void __me_check_45();
  void __me_check_46();
  void __me_check_47();
  void __me_check_48();
  void __me_check_49();
  void __me_check_50();
  void __me_check_51();
  void __me_check_52();
  void __me_check_54();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTest &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTest &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTest &backing);
};

#endif /* ifndef __mkTest_h__ */
